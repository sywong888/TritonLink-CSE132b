CREATE TABLE department (dno integer PRIMARY KEY, dname varchar(255));
CREATE TABLE student (ssn char(9) NOT NULL, first_name varchar(255), middle_name varchar(255), last_name varchar(255), student_id char(9), student_type varchar(255), resident_type varchar(255), dno integer, enrolled char(1), PRIMARY KEY (ssn), FOREIGN KEY (dno) REFERENCES department);
CREATE TABLE undergraduate (ssn char(9), type varchar(255), major varchar(255), minor varchar(255), college varchar(255), PRIMARY KEY (ssn), FOREIGN KEY (ssn) REFERENCES student);
CREATE TABLE graduate (ssn char(9) NOT NULL, PRIMARY KEY (ssn));
CREATE TABLE masters (ssn char(9) NOT NULL, PRIMARY KEY (ssn), FOREIGN KEY (ssn) REFERENCES student);
CREATE TABLE phd (ssn char(9) NOT NULL, candidate_type varchar(255), advisor varchar(255), PRIMARY KEY (ssn), FOREIGN KEY (ssn) REFERENCES student);
CREATE TABLE bsms (ssn char(9) NOT NULL, PRIMARY KEY (ssn), FOREIGN KEY (ssn) REFERENCES student);
CREATE TABLE periods_of_enrollment (ssn char(9), start_quarter varchar(255), start_year integer, end_quarter varchar(255), end_year integer, PRIMARY KEY (ssn, start_quarter, start_year, end_quarter, end_year), FOREIGN KEY (ssn) REFERENCES student);
CREATE TABLE probation_reason (reason varchar(255) NOT NULL, PRIMARY KEY (reason));
CREATE TABLE on_probation (ssn char(9) NOT NULL, reason varchar(255), quarter char(2), year integer, PRIMARY KEY (ssn, reason, quarter, year), FOREIGN KEY (ssn) REFERENCES student, FOREIGN KEY (reason) REFERENCES probation_reason);
CREATE TABLE prev_degree (ssn char(9) NOT NULL, university varchar (255), type varchar(255), graduation_date varchar(255), PRIMARY KEY (ssn), FOREIGN KEY (ssn) REFERENCES student); 
CREATE TABLE ucsd_degree (degree_number integer, degree_type varchar(255) not null, dno integer not null, total_units integer, PRIMARY KEY (degree_number), FOREIGN KEY (dno) REFERENCES department (dno));
CREATE TABLE degree_requirement (category varchar(255), degree_number integer, number_units integer, required_average float, PRIMARY KEY (category, degree_number), FOREIGN KEY (degree_number) REFERENCES ucsd_degree (degree_number));
CREATE TABLE courses (course_id integer, dno integer, current_number varchar(255), old_number varchar(255), grading_method varchar(255), possible_units varchar(255), PRIMARY KEY (course_id), FOREIGN KEY (dno) REFERENCES department (dno));
CREATE TABLE category_requirements (category varchar(255), degree_number integer, course_id integer, PRIMARY KEY (category, degree_number, course_id), FOREIGN KEY (category, degree_number) REFERENCES degree_requirement (category, degree_number), FOREIGN KEY (course_id) REFERENCES courses (course_id));
CREATE TABLE concentration (degree_number integer, name varchar(255), min_units integer, min_gpa float, PRIMARY KEY (degree_number, name), FOREIGN KEY (degree_number) REFERENCES ucsd_degree (degree_number));
CREATE TABLE concentration_requirements (degree_number integer, name varchar(255), course_id integer, PRIMARY KEY (degree_number, name, course_id), FOREIGN KEY (degree_number, name) REFERENCES concentration (degree_number, name), FOREIGN KEY (course_id) REFERENCES courses (course_id));
CREATE TABLE prerequisites (course_id integer not null, prereq_id integer not null, PRIMARY KEY (course_id, prereq_id), FOREIGN KEY (course_id) REFERENCES courses(course_id), FOREIGN KEY (prereq_id) REFERENCES courses(course_id));
CREATE TABLE faculty (faculty_id integer NOT NULL, first_name varchar(255), middle_name varchar(255), last_name varchar(255), title varchar(255), dno integer, PRIMARY KEY (faculty_id), FOREIGN KEY (dno) REFERENCES department(dno));
CREATE TABLE classes (course_id integer, class_title varchar(255), quarter char(2), year integer, PRIMARY KEY (course_id, class_title, quarter, year), FOREIGN KEY (course_id) REFERENCES courses (course_id));
CREATE TABLE section (course_id integer, class_title varchar(255), quarter char(2), year integer, section_id varchar(255), instructor_id integer, enrollment_limit integer, PRIMARY KEY (course_id, class_title, quarter, year, section_id), FOREIGN KEY (course_id, class_title, quarter, year) REFERENCES classes (course_id, class_title, quarter, year), FOREIGN KEY (instructor_id) REFERENCES Faculty (faculty_id));
CREATE TABLE meeting (course_id integer, class_title varchar(255), quarter char(2), year integer, section_id varchar(255), day varchar(255), start_time varchar(255), end_time varchar(255), room varchar(255), type varchar(255), mandatory char(1), PRIMARY KEY (course_id, class_title, quarter, year, section_id, day, start_time, end_time, room, type), FOREIGN KEY (course_id, class_title, quarter, year, section_id) REFERENCES section (course_id, class_title, quarter, year, section_id));
CREATE TABLE review_session (course_id integer, class_title varchar(255), quarter char(2), year integer, section_id varchar(255), date varchar(255), start_time varchar(255), end_time varchar(255), PRIMARY KEY (course_id, class_title, quarter, year, section_id, date, start_time, end_time), FOREIGN KEY (course_id, class_title, quarter, year, section_id) REFERENCES section (course_id, class_title, quarter, year, section_id));
CREATE TABLE enroll (ssn char(9) NOT NULL, course_id integer, class_title varchar(255), quarter char(2), year int, section_id varchar(255), units_taken integer, grade_option varchar(255), status varchar(255), grade varchar(255), PRIMARY KEY (ssn, course_id, class_title, quarter, year, section_id), FOREIGN KEY (ssn) REFERENCES student(ssn), FOREIGN KEY (course_id, class_title, quarter, year, section_id) REFERENCES section (course_id, class_title, quarter, year, section_id));
CREATE TABLE thesis_committee (ssn char(9), faculty_id integer, type varchar(255), PRIMARY KEY (ssn, faculty_id), FOREIGN KEY (ssn) REFERENCES student (ssn), FOREIGN KEY (faculty_id) REFERENCES faculty (faculty_id));
CREATE TABLE student_organization (org_id integer, name varchar(255), yearly_budget integer, PRIMARY KEY (org_id));
CREATE TABLE student_organization_participation (org_id integer, ssn char(9), position varchar(255), PRIMARY KEY (org_id, ssn, position), FOREIGN KEY (ssn) REFERENCES student(ssn), FOREIGN KEY (org_id) REFERENCES student_organization(org_id));
CREATE TABLE company (name varchar(255), org_id integer, PRIMARY KEY (name, org_id), FOREIGN KEY (org_id) REFERENCES student_organization (org_id));
CREATE TABLE event (org_id integer, title varchar(255), date varchar(255), time varchar(255), location varchar(255), PRIMARY KEY (org_id, title, date), FOREIGN KEY (org_id) REFERENCES student_organization (org_id));
create table GRADE_CONVERSION(LETTER_GRADE CHAR(2) NOT NULL, NUMBER_GRADE DECIMAL(2,1));
insert into grade_conversion values('A+', 4.3);
insert into grade_conversion values('A', 4);
insert into grade_conversion values('A-', 3.7);
insert into grade_conversion values('B+', 3.4);
insert into grade_conversion values('B', 3.1);
insert into grade_conversion values('B-', 2.8);
insert into grade_conversion values('C+', 2.5);
insert into grade_conversion values('C', 2.2);
insert into grade_conversion values('C-', 1.9);
insert into grade_conversion values('D', 1.6);